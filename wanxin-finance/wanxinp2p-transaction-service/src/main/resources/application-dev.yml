spring:
  main:
    allow-bean-definition-overriding: true # 同名bean允许覆盖
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3336/p2p_transaction_0?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
        username: root
        password: root
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3336/p2p_transaction_1?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
        username: root
        password: root
    sharding:
      default-database-strategy: # 分库策略
        inline:
          sharding-column: CONSUMER_ID
          algorithm-expression: ds$->{CONSUMER_ID % 2}
      binding-tables: project,tender
      tables:
        project:
          actual-data-nodes: ds$->{0..1}.project_$->{0..1}
          table‐strategy:  # 分库策略
            inline:
              sharding‐column: ID
              algorithm‐expression: project_$->{ID % 2}
        tender:
          actual-data-nodes: ds$->{0..1}.tender_$->{0..1}
          table‐strategy:  # 分库策略
            inline:
              sharding‐column: PROJECT_ID
              algorithm‐expression: tender_$->{PROJECT_ID % 2}
    props:
      sql:
        show: true  # 打开sql输出日志

# -Denv=dev -Dapollo.cluster=DEFAULT -Dserver.port=53060
app:
  id: transaction-service
#apollo:
#  meta: http://127.0.0.1:8080
#  bootstrap:
#    enabled: true
#    eagerLoad:
#      enabled: true
#    namespaces: application,micro_service.spring-boot-http,micro_service.spring-eureka,micro_service.spring-hystrix,micro_service.spring-feign,micro_service.spring-ribbon,micro_service.mybatis-plus,micro_service.spring-rocketmq

logging:
  config: classpath:log4j2-dev.xml
